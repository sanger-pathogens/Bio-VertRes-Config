#!/usr/bin/env perl

package Bio::VertRes::Config::Main::VirusSnpCalling;

# ABSTRACT: Create config scripts to map and snp call viruses
# PODNAME: virus_snp_calling

=head1 SYNOPSIS

Create config scripts to map and snp call viruses.

=cut

BEGIN { unshift( @INC, '../lib' ) }
BEGIN { unshift( @INC, './lib' ) }
use Moose;
use Getopt::Long;
use Bio::VertRes::Config::CommandLine::LogParameters;
use Bio::VertRes::Config::CommandLine::ConstructLimits;
use Bio::VertRes::Config::Recipes::VirusSnpCallingUsingBwa;
use Bio::VertRes::Config::Recipes::VirusSnpCallingUsingSmalt;
use Bio::VertRes::Config::Recipes::VirusSnpCallingUsingSsaha2;
use Bio::VertRes::Config::Recipes::VirusSnpCallingUsingStampy;
with 'Bio::VertRes::Config::CommandLine::ReferenceHandlingRole';

my $log_params = Bio::VertRes::Config::CommandLine::LogParameters->new( args => \@ARGV, script_name => $0 );

my ( $database, $config_base, $reference_lookup_file, $available_references, $reference, $type, $id, $species, $mapper,$regeneration_log_file,
    $help );

GetOptions(
    'd|database=s'              => \$database,
    'c|config_base=s'           => \$config_base,
    'l|reference_lookup_file=s' => \$reference_lookup_file,
    'r|reference=s'             => \$reference,
    'a|available_references=s'  => \$available_references,
    't|type=s'                  => \$type,
    'i|id=s'                    => \$id,
    's|species=s'               => \$species,
    'm|mapper=s'                => \$mapper,
    'b|regeneration_log_file=s' => \$regeneration_log_file,
    'h|help'                    => \$help,
);

$database              ||= 'pathogen_virus_track';
$config_base           ||= '/nfs/pathnfs01/conf';
$reference_lookup_file ||= '/lustre/scratch108/pathogen/pathpipe/refs/refs.index';
$regeneration_log_file ||= join('/',($config_base,'command_line.log'));
my $overwrite_existing_config_file = 0;

$log_params->log_file($regeneration_log_file);
$log_params->create();

( ( ( defined($available_references) && $available_references ne "" ) || ( $reference && $type && $id ) ) && !$help )
  or die <<USAGE;
Usage: virus_snp_calling [options]
Pipeline to map and SNP call viruses, producing a pseudo genome at the end.

# Search for an available reference
virus_snp_calling -a "flu"

# Map and SNP call a study
virus_snp_calling -t study -i 1234 -r "Influenzavirus_A_H1N1"

# Map and SNP call a single lane
virus_snp_calling -t lane -i 1234_5#6 -r "Influenzavirus_A_H1N1"

# Map and SNP call a file of lanes
virus_snp_calling -t file -i file_of_lanes -r "Influenzavirus_A_H1N1"

# Map and SNP call a single species in a study
virus_snp_calling -t study -i 1234 -r "Influenzavirus_A_H1N1" -s "Influenzavirus A"

# Map and SNP call a study with BWA instead of the default (SMALT)
virus_snp_calling -t study -i 1234 -r "Influenzavirus_A_H1N1" -m bwa

# This help message
virus_snp_calling -h

USAGE

handle_reference_inputs_or_exit($reference_lookup_file, $available_references, $reference);


my $limits = Bio::VertRes::Config::CommandLine::ConstructLimits->new(
    input_type => $type,
    input_id   => $id,
    species    => $species
)->limits_hash;

my %snp_calling_parameters = (
    database                       => $database,
    config_base                    => $config_base,
    limits                         => $limits,
    reference_lookup_file          => $reference_lookup_file,
    reference                      => $reference,
    overwrite_existing_config_file => $overwrite_existing_config_file
);

if ( defined($mapper) && $mapper eq 'bwa' ) {
    Bio::VertRes::Config::Recipes::VirusSnpCallingUsingBwa->new( \%snp_calling_parameters )->create();
}    
elsif ( defined($mapper) && $mapper eq 'ssaha2' ) {
    Bio::VertRes::Config::Recipes::VirusSnpCallingUsingSsaha2->new( \%snp_calling_parameters )->create();
}
elsif ( defined($mapper) && $mapper eq 'stampy' ) {
    Bio::VertRes::Config::Recipes::VirusSnpCallingUsingStampy->new( \%snp_calling_parameters )->create();
}
else {
    Bio::VertRes::Config::Recipes::VirusSnpCallingUsingSmalt->new( \%snp_calling_parameters )->create();
}
print "Once the data is available you can run these commands:\n\n";

print "Create a multifasta alignment file of your data\n";
print "  snpfind -t $type -i $id -p \n\n";

print "Create symlinks to the unfiltered variants in VCF format\n";
print "  snpfind -t $type -i $id -symlink\n\n";

print "Symlink to the BAM files\n";
print "  mapfind -t $type -i $id -symlink\n\n";

print "More details\n";
print "  snpfind -h\n";
print "  mapfind -h\n\n";

